SET SERVEROUTPUT ON
/
DECLARE
CURSOR C_FK IS SELECT TABLE_NAME,CONSTRAINT_NAME FROM USER_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'R'; --CURSOR TO STORE TABLE NAME AND CONSTRAINT NAME
CURSOR C_SK IS SELECT SEQUENCE_NAME FROM USER_SEQUENCES;
CURSOR C_TBL IS SELECT TABLE_NAME FROM USER_TABLES;
CURSOR C_IDX IS SELECT INDEX_NAME FROM USER_INDEXES WHERE INDEX_NAME='IDX1' OR INDEX_NAME='IDX3';
I NUMBER:=0;                                                                                        --DECLARE AND INITALIZE VARIABLE I
V_COUNT  NUMBER :=0;
V_COUNT1 NUMBER:=0;--DECLARE COUNTER 
V_COUNT2 NUMBER:=0;
V_COUNT3 NUMBER:=0;
BEGIN
WHILE I<5                                                                                           --WHILE LOOP TO ITERATE I VARIABLE UNTIL I VALUE IS LESS THAN 3
	LOOP
		I:=I+1;                                                                                     --INCREMENT I VALUE
		SELECT COUNT(*) INTO V_COUNT FROM USER_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'R';				--SELECT QUERY TO INSERT NUMBER OF REFRENTIAL KEYS INTO VARIABLE V_COUNT
		SELECT COUNT(*) INTO V_COUNT1 FROM USER_SEQUENCES;	
		SELECT COUNT(*) INTO V_COUNT2 FROM USER_TABLES;
		SELECT COUNT(*) INTO V_COUNT3 FROM USER_INDEXES WHERE INDEX_NAME='IDX1' OR INDEX_NAME='IDX3';
            IF I=1 AND V_COUNT>0 THEN                                                               --IF CLAUSE TO CHECK I VALUE AND NUMBER OF VALUES IN V_COUNT VARIABLE
					FOR FK IN C_FK LOOP 
                    DBMS_OUTPUT.PUT_LINE('DROPPING FOREIGN KEY CONSTRAINTS FOR TABLE '||FK.TABLE_NAME);--FOR LOOP TO ITERATE CURSOR C_FK
					EXECUTE IMMEDIATE 'ALTER TABLE ' || FK.TABLE_NAME || ' DROP CONSTRAINT ' || FK.CONSTRAINT_NAME; --DROP ALL FOREIGN KEY CONSTRAINTS IN DATABASE             --DISPLAY DROPPING MESSAGE TO CONSOLE
					END LOOP;
            ELSE IF I=2 AND V_COUNT2>0 THEN
					FOR TBL IN C_TBL LOOP
                    DBMS_OUTPUT.PUT_LINE('DROPPING TABLES '||TBL.TABLE_NAME);
					EXECUTE IMMEDIATE 'DROP TABLE '||TBL.TABLE_NAME;
					END LOOP;
			ELSE IF I=3 AND V_COUNT3>0 THEN
					FOR IDX IN C_IDX LOOP
                    DBMS_OUTPUT.PUT_LINE('DROPPING INDEXES '||IDX.INDEX_NAME);
					EXECUTE IMMEDIATE 'DROP INDEX '||IDX.INDEX_NAME;
					END LOOP;
			ELSE IF i=4 AND V_COUNT=0 AND V_COUNT1=0 AND V_COUNT2=0 AND V_COUNT3=0 THEN
					DBMS_OUTPUT.PUT_LINE('NO OBJECTS EXISTS IN DATABASE');
			END IF;
            END IF;
            END IF;
            END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('DATABASE CLEANUP DONE SUCCESSFULLY');
END;
/



-- Patient Details
CREATE TABLE PatientDetails (
  PatientId INT GENERATED ALWAYS AS IDENTITY (START WITH 1000 INCREMENT BY 1) PRIMARY KEY,
  FirstName VARCHAR(255),
  LastName VARCHAR(255),
  StreetName VARCHAR(255),
  City VARCHAR(255),
  State VARCHAR(2),
  Zipcode VARCHAR(10)
);

-- Doctor Details
CREATE TABLE DoctorDetails (
  DoctorID INT GENERATED ALWAYS AS IDENTITY (START WITH 2000 INCREMENT BY 1) PRIMARY KEY,
  FirstName VARCHAR(255),
  LastName VARCHAR(255),
  Specialization VARCHAR(255)
);

-- Nurse Details
CREATE TABLE NurseDetails (
  NurseID INT GENERATED ALWAYS AS IDENTITY (START WITH 3000 INCREMENT BY 1) PRIMARY KEY,
  FirstName VARCHAR(255),
  LastName VARCHAR(255)
);

-- Drug Details
CREATE TABLE DrugDetails (
  DrugID INT GENERATED ALWAYS AS IDENTITY (START WITH 4000 INCREMENT BY 1) PRIMARY KEY,
  DrugName VARCHAR(255),
  DrugComposition VARCHAR(255),
  KnownSideEffects VARCHAR(255)
);

-- Test Type
CREATE TABLE TestType (
  TestID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  TestName VARCHAR(255)
);

-- Records
CREATE TABLE pRecords (
  RecordID INT GENERATED ALWAYS AS IDENTITY (START WITH 1000 INCREMENT BY 1) PRIMARY KEY,
  PatientSymptomsBefore VARCHAR(255),
  PatientSideEffectsAfter VARCHAR(255),
  PatientId INT,
  DoctorId INT,
  FOREIGN KEY (PatientId) REFERENCES PatientDetails(PatientId),
  FOREIGN KEY (DoctorId) REFERENCES DoctorDetails(DoctorID)
);

-- Drug Administration
CREATE TABLE DrugAdministration (
  DrugAdministrationID INT GENERATED ALWAYS AS IDENTITY (START WITH 1000 INCREMENT BY 1) PRIMARY KEY,
  PrescriptionNo VARCHAR(255),
  DateAdministered DATE,
  DrugID INT,
  PatientId INT,
  DoctorId INT,
  NurseId INT,
  FOREIGN KEY (PatientId) REFERENCES PatientDetails(PatientId),
  FOREIGN KEY (DoctorId) REFERENCES DoctorDetails(DoctorID),
  FOREIGN KEY (NurseId) REFERENCES NurseDetails(NurseID),
  FOREIGN KEY (DrugID) REFERENCES DrugDetails(DrugID)
);

-- Test Administration Records
CREATE TABLE TestAdministrationRecords (
  TestAdministrationID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  DateAdministered DATE,
  TestResult VARCHAR(255),
  TestID INT,
  DoctorId INT,
  NurseId INT,
  FOREIGN KEY (DoctorId) REFERENCES DoctorDetails(DoctorID),
  FOREIGN KEY (NurseId) REFERENCES NurseDetails(NurseID),
  FOREIGN KEY (TestID) REFERENCES TestType(TestID)
);

-- Test Records
CREATE TABLE TestRecords (
  TestRecordID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  RecordID INT,
  TestAdministrationID INT,
  FOREIGN KEY (TestAdministrationID) REFERENCES TestAdministrationRecords(TestAdministrationID),
  FOREIGN KEY (RecordID) REFERENCES pRecords(RecordID)
);

-- Shift Timings
CREATE TABLE Shifts (
  NurseID INT,
  DoctorID INT,
  ShiftStartTime timestamp,
  ShiftEndTime timestamp,
  FOREIGN KEY (NurseID) REFERENCES NurseDetails(NurseID),
  FOREIGN KEY (DoctorID) REFERENCES DoctorDetails(DoctorID)
);

CREATE TABLE PatientRecord (
  PatientRecordID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  PatientId INT,
  DoctorId INT,
  FOREIGN KEY (PatientId) REFERENCES PatientDetails(PatientId),
  FOREIGN KEY (DoctorID) REFERENCES DoctorDetails(DoctorID)
);

CREATE TABLE DrugRecord (
  DrugRecordID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
  DrugAdministrationID INT,
  RecordID INT,
  FOREIGN KEY (DrugAdministrationID) REFERENCES DrugAdministration(DrugAdministrationId),
  FOREIGN KEY (RecordID) REFERENCES pRecords(RecordID)
);